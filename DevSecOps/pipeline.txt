pipeline {
    agent any

    environment {
        SONAR_HOME = tool "sonar-scanner"
    }

    stages {
        stage("Code") {
            steps {
                git url: "https://github.com/LondheShubham153/node-todo-cicd.git", branch: "master"
                echo "Code Cloned Successfully"
            }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv("sonar-server") {
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=nodetodo -Dsonar.projectKey=nodetodo -X"
                }
            }
        }

        stage("SonarQube Quality Gates") {
            steps {
                timeout(time: 1, unit: "MINUTES") {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage("OWASP") {
            steps {
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage("Build & Test") {
            steps {
                sh 'docker build -t monudocker334/node-app:latest .'
                echo "Code Built Successfully"
            }
        }

        stage("Trivy") {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                       trivy image \
                         --timeout 10m \
                         --cache-dir /tmp/trivy-cache \
                         --db-repository ghcr.io/aquasecurity/trivy-db:2 \
                         monudocker334/node-app:latest
                    '''
                }
            }
        }

        stage("Push to Private Docker Hub Repo") {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: "docker-creds", passwordVariable: "dockerPass", usernameVariable: "dockerUser")]) {
                    sh "docker login -u ${env.dockerUser} -p ${env.dockerPass}"
                    sh "docker push ${env.dockerUser}/node-app:latest"
                }
            }
        }

        stage("Deploy") {
            steps {
                sh "docker-compose down && docker-compose up -d"
                echo "App Deployed Successfully"
            }
        }
    }
}
